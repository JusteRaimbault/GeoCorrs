summary(deviations(1:80,7,1.5))
summary(deviations(1:80,8,1.5))
summary(deviations(1:80,7,1.5))
summary(deviations(1:80,8,1.5))
?decile
??decile
?quantile
quantile(deviations(1:80,5,1.5))
quantile(deviations(1:80,5,1.5),na.rm=TRUE)
quantile(deviations(1:80,5,1.5),probs=c(0.1,0.5,0.9),na.rm=TRUE)
quantile(deviations(1:80,6,1.5),probs=c(0.1,0.5,0.9),na.rm=TRUE)
quantile(deviations(1:80,5,1.5),probs=c(0.1,0.5,0.98),na.rm=TRUE)
quantile(deviations(1:80,5,1.5),probs=c(0.1,0.5,1),na.rm=TRUE)
quantile(deviations(1:80,6,1.5),probs=c(0.1,0.5,1),na.rm=TRUE)
quantile(deviations(1:80,7,1.5),probs=c(0.1,0.5,0.9),na.rm=TRUE)
quantile(deviations(1:80,7,1.5),probs=c(0.1,0.5,0.8),na.rm=TRUE)
quantile(deviations(1:80,8,1.5),probs=c(0.1,0.5,0.9),na.rm=TRUE)
quantile(deviations(1:80,8,1.5),probs=c(0.1,0.5,1),na.rm=TRUE)
quantile(deviations(1:80,7,1.5),probs=c(0.1,0.5,0.8),na.rm=TRUE)
install.packages("lme4","Rcmdr","GISTools","RColorBrewer","Maptools","Sp","Foreign","Spdep","GWmodel","Rgeos")
install.packages("lme4","GISTools","RColorBrewer","Maptools","Sp","Foreign","Spdep","GWmodel","Rgeos")
install.packages("lme4")
install.packages("Rcmdr")
install.packages("GISTools")
install.packages("RColorBrewer")
install.packages("Maptools")
install.packages("Sp")
install.packages("Foreign")
install.packages("Spdep")
install.packages("GWmodel")
install.packages("Rgeos")
?install.packages
install.packages("/Users/Juste/Documents/Applications/R/GISRUK09_0.5-1.tar.gz",repos=NULL)
install.packages("/Users/Juste/Documents/Applications/R/GISRUK09_0.5-1.tar.gz",repos=NULL,type="source")
install.packages("rgl")
install.packages("/Users/Juste/Documents/Applications/R/GISRUK09_0.5-1.tar.gz",repos=NULL,type="source")
install.packages("rgeos")
install.packages("maptools")
install.packages("sp")
install.packages("foregin")
install.packages("foreign")
install.packages("spdep")
Gedu.ols <- lm(PctBach~PctEld+PctFB+PctPov,data=Gedu.counties)
Gedu.counties$Stud.resid <- rstudent(Gedu.ols)
#Lab 2 :: geo weighted regressino
require(GWmodel)
require(RColorBrewer)
require(classInt)
#Gedu.df
data(Georgia)
#Gedu.counties
data(GeorgiaCounties)
dim(Gedu.df)
names(Gedu.df)
plot(Gedu.df)
plot(Gedu.counties)
names(Gedu.counties)
#merge data frames -- if bijection, can order and put together
#this can be viewed as a simple primitive for data merging --
Gedu.counties@data <- data.frame(Gedu.counties@data,Gedu.df[match(Gedu.counties$AREAKEY,Gedu.df$AreaKey),])
#check
head(Gedu.counties@data)
#scatter plots
plot(Gedu.df[,6:10])
#quick mapping
spplot(Gedu.counties,"PctBach")
coords=matrix(
data=c(33.775618, -84.396424,
33.948112, -83.377687,
33.792284, -84.324345,
33.752952, -84.385303,
34.034982, -84.584189,
32.072668, -81.094052,
30.846612, -83.289128,
33.573536, -85.099593
),byrow=TRUE,nrow=8)
facs <- SpatialPointsDataFrame(coords=coords,data=data.frame(coords))
#PB :: compatibility error with ssplot ?
#plot(facs,add=TRUE,pch=16)
spplot(Gedu.counties,"PctBach",col.regions=rev(brewer.pal(11,"Spectral")),cuts=10)
spplot(facs,add=TRUE,pch=16)
summary(Gedu.df[,6:10])
#Linear regression
Gedu.ols <- lm(PctBach~PctEld+PctFB+PctPov+PctBlack,data=Gedu.counties)
summary(Gedu.ols)
m3 <- lm(PctBach~PctPov, data=Gedu.counties)
m4 <- lm(PctBach~PctBlack, data=Gedu.counties)
AIC(m3)
AIC(m4)
#AIC has to be minimized to have bettest fit ?
# 1) global unspatilazed model
Gedu.ols <- lm(PctBach~PctEld+PctFB+PctPov,data=Gedu.counties)
summary(Gedu.ols)
AIC(Gedu.ols)
# 2) try geographical wieghted model
#adaptative kernel
Gedu.bw1 <- bw.gwr(PctBach~PctEld+PctFB+PctPov,data=Gedu.counties,approach="AIC", kernel="bisquare",adaptive=T)
#test a gaussian
Gedu.bw2 <- bw.gwr(PctBach~PctEld+PctFB+PctPov,data=Gedu.counties,approach="CV", kernel="bisquare",adaptive=T)
# 3) Fit global model
Gedu.gw1 <- gwr.basic(PctBach~PctEld+PctFB+PctPov,data=Gedu.counties, bw=Gedu.bw1,kernel="bisquare",adaptive=T)
print(Gedu.gw1)
#AIC(Gedu.gw1) # no call -- in the info
#AIC is lower
#result is a object with its proper toString method --> therfore use of print()
names(Gedu.gw1$SDF)
#OK
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE)
spplot(Gedu.gw1$SDF,"Stud_residual",key.space = "right",cuts=10,
col.regions=rev(brewer.pal(11,"Spectral")),main="GW studentized residuals")
spplot(Gedu.gw1$SDF,"Stud_residual",key.space = "right",
at=c(-4, -3, -2, -1, 0, 1, 2, 3, 4, 5),
col.regions=rev(brewer.pal(11,"Spectral")),main="GW studentized residuals")
#better clusters
brks <- classIntervals(Gedu.gw1$SDF$Stud_residual, n=6, style="kmeans")$brks
eps <- 2 * (.Machine$double.eps)
brks[1] <- brks[1] - eps
brks[length(brks)] <- brks[length(brks)] + eps
spplot(Gedu.gw1$SDF,"Stud_residual",key.space = "right",
at=brks, col.regions=rev(brewer.pal(length(brks)-1,"Spectral")), main="GW studentized residuals")
# directly map significant coefficient
brks <- classIntervals(Gedu.gw1$SDF$PctFB, n=10, style="jenks")$brks
spplot(Gedu.gw1$SDF,"PctFB",key.space = "right",
at=brks,
col.regions=rev(brewer.pal(length(brks)-1,"Spectral")), main="GW PctFB Parameter Estimates")
# other coefs ?
brks <- classIntervals(Gedu.gw1$SDF$PctPov, n=10, style="jenks")$brks
spplot(Gedu.gw1$SDF,"PctPov",key.space = "right",
at=brks,
col.regions=rev(brewer.pal(length(brks)-1,"Spectral")), main="GW PctFB Parameter Estimates")
Gedu.ols <- lm(PctBach~PctEld+PctFB+PctPov,data=Gedu.counties)
Gedu.counties$Stud.resid <- rstudent(Gedu.ols)
spplot(Gedu.counties,"Stud.resid",key.space = "right",
at=c(-4, -3, -2, -1, 0, 1, 2, 3, 4, 5), col.regions=rev(brewer.pal(9,"Spectral")),main="OLS studentized residuals")
DM<-gw.dist(dp.locat=coordinates(Gedu.counties))
DM
res.mont1<-montecarlo.gwr(PctBach~PctEld+PctFB+PctPov,
data=Gedu.counties,
dMat=DM,kernel="bisquare",adaptive=T,bw=Gedu.bw1)
?montecarlo.gwr
Gedu.bw1
Gedu.gw1 <- gwr.basic(PctBach~PctEld+PctFB+PctPov,data=Gedu.counties, bw=Gedu.bw1,kernel="bisquare",adaptive=T)
print(Gedu.gw1)
?GWModel
?packages
?installed.packages
co
ign
co <- c(0.135,0.134,0.076,0.019)
ign<- c(1936,1934,990.8,219.2)
co
?lm
lm(co~ign,data.frame(co,ign))
plot(co,ign)
1/15000
l=lm(co~ign,data.frame(co,ign))
summary(l)
lattice is better
library(lattice)
#stats on outputs
dat <- read.csv("/Users/Juste/Documents/Cours/ComplexSystemsMadeSimple/UrbanMorphogenesis/Results/GridExploration/grid_step0.5_rep100.csv",sep=";")
#dat$eval.activities <- dat$eval.activities/max(unlist(dat$eval.activities))
mor <- dat$spatial.autocorrelation.index
grid <- read.csv("/Users/Juste/Documents/Cours/ComplexSystemsMadeSimple/UrbanMorphogenesis/Results/GridExploration/gridGood.csv",sep=";")
plot3d <- function(reporterName,xParamName,yParamName, otherParams,otherParamsValues,theta,phi,title,xlab,ylab){
x <- sort(unique(grid[[xParamName]]))
y <- sort(unique(grid[[yParamName]]))
z = matrix(nrow=length(x),ncol=length(y))
xcors = matrix(nrow=length(x),ncol=length(y))
ycors = matrix(nrow=length(x),ncol=length(y))
for(i in 1:length(x)){
for(j in 1:length(y)){
#if(i!=1&&j!=1){
z[i,j] = getReporterValue(c(xParamName,yParamName, otherParams),c(x[i],y[j], otherParamsValues),reporterName,grid)
xcors[i,j]=x[i];ycors[i,j]=y[j]
#}
}
}
#z[1,1]=min(z[z>min(z)])
z[1,1]=NA
#wireframe(z~xcors*ycors,data=data.frame(z,xcors,ycors),aspect = c(1,1),col="blue",shade=TRUE,light.source = c(10,0,10))
#wireframe(x = z,row.values = x, column.values = y ,angle=50,scales = list(arrows = FALSE,distance=c(2,2,2)),screen = list(z = 30, x = -60),drape = TRUE,xlab=xParamName,ylab=yParamName,zlab=reporterName)
#persp function is more ergonomic
persp(x=x,y=y,z=z,
r=10,theta=theta,phi=phi,
col="lightblue",xlab=xlab,ylab=ylab,zlab="",
shade = 0.75, ticktype = "detailed",cex.lab=0.8,cex.axis=0.6,main=title)
}
plot3d("\beta_t","\beta_d","MSE",c("distance.to.activities.coefficient","distance.to.roads.coefficient"),c(0,0),50,25,"",xlab="",ylab="")
plot3d("\beta_t","\beta_d","MSE",c("distance.to.activities.coefficient","distance.to.roads.coefficient"),c(0,0),50,25,"MSE",xlab="alpha_3",ylab="alpha_1")
removeOutliers<-function(x,prop){
if(prop>0){
x=x[which(abs(x-mean(x))<sd(x)*prop)]
#res = x;num=floor(length(x)*prop)
#for(i in 1:num){
#  p1 = chisq.out.test(res,opposite=FALSE)$p.value
#  p2 = chisq.out.test(res,opposite=TRUE)$p.value
#  ma = max(res);mi=min(res);me=mean(res)
#  if(abs(ma-me)>abs(mi-me)){if(p1<p2){res=res[!which(res==ma)]}else{res=res[!which(res==mi)]}}
#  else{if(p1<p2){res=res[!which(res==mi)]}else{res=res[!which(res==ma)]}}
#}
}
return(x)
}
plot3d("\beta_t","\beta_d","MSE",c("distance.to.activities.coefficient","distance.to.roads.coefficient"),c(0,0),50,25,"MSE",xlab="alpha_3",ylab="alpha_1")
plot3d("beta_t","beta_d","MSE",c("distance.to.activities.coefficient","distance.to.roads.coefficient"),c(0,0),50,25,"MSE",xlab="alpha_3",ylab="alpha_1")
getReporterValue <- function(paramNames,paramValues,repName,dat){
cum = 0 ; reals = 0
for(i in 1:length(dat[[paramNames[1]]])){
j = 1
eq = TRUE
for(param in paramNames){
eq = eq&&(dat[[param]][i]==paramValues[j])
j = j + 1
}
if(eq){cum=cum+dat[[repName]][i];reals=reals+1}
}
if(reals==0){return(0)}
else{return(cum/reals)}
}
plot3d("beta_t","beta_d","MSE",c("distance.to.activities.coefficient","distance.to.roads.coefficient"),c(0,0),50,25,"MSE",xlab="alpha_3",ylab="alpha_1")
plot3d("spatial.autocorrelation.index","distance.to.center.coefficient","density.coefficient",c("distance.to.activities.coefficient","distance.to.roads.coefficient"),c(0,0),50,25,"Moran Index",xlab="alpha_3",ylab="alpha_1")
plot3d("spatial.autocorrelation.index","distance.to.center.coefficient","density.coefficient",c("distance.to.activities.coefficient","distance.to.roads.coefficient"),c(0,0),50,25,"",xlab="\beta_d",ylab="\beta_t")
plot3d("spatial.autocorrelation.index","distance.to.center.coefficient","density.coefficient",c("distance.to.activities.coefficient","distance.to.roads.coefficient"),c(0,0),50,25,"",xlab="beta_d",ylab="beta_t")
dat <- read.csv("/Users/Juste/Documents/Cours/PIL/DiscreteChoiceBikeSharing/Data/data.csv",sep="\t")
dat <- read.csv("/Users/Juste/Documents/Cours/PIL/DiscreteChoiceBikeSharing/Data/discretechoice/data.csv",sep="\t")
dat <- read.csv("/Users/Juste/Documents/Cours/PIL/DiscreteChoicesBikeSharing/Data/discretechoice/data.csv",sep="\t")
dat
summary(dat)
size(dat)
length(dat)
length(dat(:,1))
length(dat[,1])
dat <- read.csv("/Users/Juste/Documents/Cours/PIL/DiscreteChoicesBikeSharing/Data/data/1377727201.csv",sep=";")
dat
dat <- read.csv("/Users/Juste/Documents/Cours/PIL/DiscreteChoicesBikeSharing/Data/data/1377727201.csv",sep=" ")
summary(dat)
plot(dat[,1])
plot(dat[,1],'l')
plot(dat[,1],ylab="load factor",xlab=time)
plot(dat[,1],ylab="load factor",xlab="time")
plot(dat[,1],ylab="load factor",xlab="time",style="l")
??plot
plot(dat[,1],ylab="load factor",xlab="time",type="l")
plot(dat[,1],ylab="standing bikes",xlab="time",type="l")
plot(dat[,2],ylab="standing bikes",xlab="time",type="l")
plot(dat[,3],ylab="standing bikes",xlab="time",type="l")
plot(dat[,10],ylab="standing bikes",xlab="time",type="l")
plot(dat[,20],ylab="standing bikes",xlab="time",type="l")
length(dat[,1])
length(dat[1,])
plot(dat[,1],ylab="standing bikes",xlab="time",type="l")
plot(dat[,20],ylab="standing bikes",xlab="time",type="l")
plot(dat[,10],ylab="standing bikes",xlab="time",type="l")
plot(dat[,1],ylab="standing bikes",xlab="time",type="l")
plot(dat[,3],ylab="standing bikes",xlab="time",type="l")
plot(dat[,3],ylab="standing bikes",xlab="time",type="l")
45*50
library(foreign)
data <- read.dta("/Users/Juste/Documents/ComplexSystems/FinancialNetwork//Data//Trade//wtf_bilat//wtf_bilat.dta")
data
summary(data)
length(data)
data.importer
d <- read.dta("/Users/Juste/Documents/ComplexSystems/FinancialNetwork//Data//Trade//wtf_bilat//wtf_bilat.dta")
d
d[1,1]
d[1,10]
d[,10]
d=data.frame(d)
d
summary(d)
library(foreign)
library(foreign)
d <- read.dta("/Users/Juste/Documents/ComplexSystems/FinancialNetwork//Data//Trade//wtf_bilat//wtf_bilat.dta")
d <- read.dta("/Users/Juste/Documents/ComplexSystems/FinancialNetwork//Data//Trade//wtf_bilat//wtf_bilat.dta")
summary(d)
d[1:10,1:10]
d.ecode
d$ecode
length(d.ecode)
length(d$ecode)
length(d$icode)
help
help("plot")
d[1,]
plot(d[1,5:end])
plot(d[1,5:length(d[1,])])
d[1,5:length(d[1,])]
length(d[1,5:length(d[1,])])
plot(1:39,d[1,5:length(d[1,])])
plot(1962:2000,d[1,5:length(d[1,])])
plot(1962:2000,d[1,5:length(d[1,])]);
plot(1962:2000,d[1,5:length(d[1,])]);
plot(1962:2000,d[1,5:length(d[1,])]);
getwd()
View(app)
d[2,]
help unique
help("unique")
unique(d$importer)
201^2
length(d)
length(d$imprter)
length(d$importer)
help("find")
d$importer(d$importer=="France")
(d$importer)=="France"
d$importer((d$importer)=="France")
d$importer((d$importer)=="France"*1)
(d$importer)=="France"*1
(d$importer)=="France"
d[(d$importer)=="France"]
d[(d$importer)=="Ireland"]
d[(d$importer)=="Ireland",:]
d[(d$importer)=="Ireland",]
d[18224,]
p=length(d[1,])
plot(1962:2000,d[18224,5:p])
#Lab 2 :: geo weighted regressino
require(GWmodel)
require(RColorBrewer)
require(classInt)
#Gedu.df
data(Georgia)
#Gedu.counties
data(GeorgiaCounties)
dim(Gedu.df)
names(Gedu.df)
plot(Gedu.df)
plot(Gedu.counties)
names(Gedu.counties)
#merge data frames -- if bijection, can order and put together
#this can be viewed as a simple primitive for data merging --
Gedu.counties@data <- data.frame(Gedu.counties@data,Gedu.df[match(Gedu.counties$AREAKEY,Gedu.df$AreaKey),])
#check
head(Gedu.counties@data)
#scatter plots
plot(Gedu.df[,6:10])
#quick mapping
spplot(Gedu.counties,"PctBach")
coords=matrix(
data=c(33.775618, -84.396424,
33.948112, -83.377687,
33.792284, -84.324345,
33.752952, -84.385303,
34.034982, -84.584189,
32.072668, -81.094052,
30.846612, -83.289128,
33.573536, -85.099593
),byrow=TRUE,nrow=8)
facs <- SpatialPointsDataFrame(coords=coords,data=data.frame(coords))
#PB :: compatibility error with ssplot ?
#plot(facs,add=TRUE,pch=16)
spplot(Gedu.counties,"PctBach",col.regions=rev(brewer.pal(11,"Spectral")),cuts=10)
spplot(facs,add=TRUE,pch=16)
spplot(Gedu.counties,"PctBach",col.regions=rev(brewer.pal(11,"Spectral")),cuts=10)
spplot(facs,add=TRUE,pch=16)
spplot(Gedu.counties,"PctBach",col.regions=rev(brewer.pal(11,"Spectral")),cuts=10)
help(ssplot)
help(spplot)
library(maps)       # Provides functions that let us plot the maps
library(mapdata)
help("maps")
maps
??maps
map()
install.packages("mapdata")
library(mapdata)
map()
map('worldHires')
points(-1.615672,54.977768,col=2,pch=18)
help(line)
getwd
getwd()
setwd('/Users/Juste/Documents//ComplexSystems//FinancialNetwork//GeoCorrs')
library(foreign)
d <- read.dta("Data//Trade//wtf_bilat//wtf_bilat.dta")
p=length(d[1,])
# mapping
library(maps)
library(mapdata)
library(rworldmap)
data(countriesCoarseLessIslands)
# Example : plot total world trade
#plot(1962:2000,d[1,5:p]);
# \phi_i = sum_{j\neq i}\phi^{(i,j)}
# same with algebric ?
# example : France -> Ireland
years = 1962:2000;
plot(1962:2000,d[1,5:p],xlab='year',ylab='World')
#######################
## Core
#######################
#get countries list
countriesIDs = unique(d[1:201,3]);
countries = unique(d[,4])
# remove former countries or shitty elements
to_remove = c(1,9,32,37,39,41,50,53,55,67,73,75,78,81,82,84,85,87,88,92,95,97,104,107,111,112,114,120,125,130,142,143,151,159,166,167,168,172,174,176,189,190,191,192,196,199,200,201)
c=0
for(r in to_remove){
countries<-countries[(-r+c)]
c=c+1
}
countries=sort(countries)
N=length(countries)
# corresponding coordinates
all_coord=coordinates(countriesCoarseLessIslands)
coordbij=read.csv('./Data/bijCoordinates.csv',header=FALSE)
countriesCoords = all_coord[coordbij$V1,]
# test for correspondance of coordinates
#dd=data.frame(rownames(countriesCoords),countries)
# network drawing function
drawNetwork <- function(matrix,threshold){
map()
matrix = (matrix - min(matrix))/(max(matrix)-min(matrix))
for(i in 1:(N-1)){
for(j in (i+1):N){
if(i==49&&j==147){show(matrix[i,j])}
if(matrix[i,j]>threshold){
w = matrix[i,j]
colindex <- floor(99 * (w-threshold)/(1-threshold)) + 1
c <- colorRampPalette(c("lightblue", "darkred"))(100)[colindex]
segments(countriesCoords[i,1],countriesCoords[i,2],
countriesCoords[j,1],countriesCoords[j,2],
col=c,lwd=w*7)
}
}
}
}
#test
drawNetwork(matrix(data=runif(N*N,-10,10),nrow=N,ncol=N),0.5)
# construct algebric flows matrix \bar{\phi}_{i,j}
flows = array(data=rep(0,N*N*(p-4)),dim=c(N,N,p-4));
for(i in 1:N){
show(i)
for(j in 1:N){
f=d[which((d$exporter==countries[i])&(d$importer==countries[j])),5:p]
if(length(f[,1])>0){
for(k in 1:length(f[,1])){
for(t in 1:length(f[1,])){
if(!is.na(f[k,t])){flows[i,j,t]=flows[i,j,t]+f[k,t]}
}
}
}
f=d[which((d$exporter==countries[j])&(d$importer==countries[i])),5:p]
if(length(f[,1])>0){
for(k in 1:length(f[,1])){
for(t in 1:length(f[1,])){
if(!is.na(f[k,t])){flows[i,j,t]=flows[i,j,t]-f[k,t]}
}
}
}
}
}
cum_flows = matrix(nrow=N,ncol=(p-4))
for(i in 1:N){
cum = rep(0,(p-4))
for(j in 1:N){
cum = cum + flows[i,j,]
}
cum_flows[i,]=cum
}
help('corr')
help('correlation')
help('cor')
# construct phi_i
cum_flows = matrix(nrow=N,ncol=(p-4))
for(i in 1:N){
cum = rep(0,(p-4))
for(j in 1:N){
cum = cum + flows[i,j,]
}
cum_flows[i,]=cum
}
LR = matrix(nrow=N,ncol=(p-4))
for(i in 1:N){
LR[i,]=cum_flows[i,]/cumsum(cum_flows[i,])
}
LR
help('tr')
help('t')
cor(t(LR))
help('diff')
diff(1:10)
diff(1:2:10)
diff([1 3 4])
diff(c(1 3 4))
diff(c(1,3,4))
LR = matrix(nrow=N,ncol=(p-5))
for(i in 1:N){
Ki=cumsum(cum_flows[i,])+1;
LR[i,]=diff(log(Ki))
}
warnings()
LR = matrix(nrow=N,ncol=(p-5))
for(i in 1:N){
Ki=cumsum(cum_flows[i,])+1;
show(Ki)
LR[i,]=diff(log(Ki))
}
cum_flows=(cum_flows-min(cum_flows))
cum_flows
cum_flows=(cum_flows-min(cum_flows))+1
cum_flows
LR = matrix(nrow=N,ncol=(p-5))
for(i in 1:N){
Ki=cumsum(cum_flows[i,]);
LR[i,]=diff(log(Ki))
}
LR
cor(t(LR))
